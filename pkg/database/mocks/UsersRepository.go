// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	openapi "github.com/Pedrommb91/go-api-template/internal/api/openapi"
	mock "github.com/stretchr/testify/mock"
)

// UsersRepository is an autogenerated mock type for the UsersRepository type
type UsersRepository struct {
	mock.Mock
}

// GetUsers provides a mock function with given fields:
func (_m *UsersRepository) GetUsers() ([]*openapi.GetUsersResponse, error) {
	ret := _m.Called()

	var r0 []*openapi.GetUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*openapi.GetUsersResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*openapi.GetUsersResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*openapi.GetUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersRepository creates a new instance of UsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersRepository(t mockConstructorTestingTNewUsersRepository) *UsersRepository {
	mock := &UsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
